// <auto-generated />
using System;
using ApiFichaAcademia.Migrations.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiFichaAcademia.Migrations.Migrations
{
    [DbContext(typeof(FichaAcademiaContext))]
    [Migration("20240603112348_creating-table-cardExercise")]
    partial class creatingtablecardExercise
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("TB_CARD");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.CardExercise", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("TB_CARD_EXERCISE");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WeeklyFrequency")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TB_CLIENT");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdLevel");

                    b.ToTable("TB_EXERCISE");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.LevelExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TB_LEVEL_EXERCISE");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TB_OBJECTIVE");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TB_TEACHER");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Card", b =>
                {
                    b.HasOne("ApiFichaAcademia.Models.Model.Client", "Client")
                        .WithMany("Cards")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.CardExercise", b =>
                {
                    b.HasOne("ApiFichaAcademia.Models.Model.Card", "Card")
                        .WithMany("CardExercises")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiFichaAcademia.Models.Model.Exercise", "Exercise")
                        .WithMany("CardExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Exercise", b =>
                {
                    b.HasOne("ApiFichaAcademia.Models.Model.LevelExercise", "LevelExercise")
                        .WithMany()
                        .HasForeignKey("IdLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelExercise");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Card", b =>
                {
                    b.Navigation("CardExercises");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Client", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ApiFichaAcademia.Models.Model.Exercise", b =>
                {
                    b.Navigation("CardExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
